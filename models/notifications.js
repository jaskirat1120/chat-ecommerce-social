'use strict';
// npm modules
const mongoose = require('mongoose');

// Constants imported
const APP_CONSTANTS = require('../config/constants/app-defaults');
let statusEnum = [
    APP_CONSTANTS.DATABASE.NOTIFICATION_STATUS.UNREAD,
    APP_CONSTANTS.DATABASE.NOTIFICATION_STATUS.READ,
    APP_CONSTANTS.DATABASE.NOTIFICATION_STATUS.CLEAR,
    APP_CONSTANTS.STATUS_ENUM.DELETED
]
// constructor
const Schema = mongoose.Schema;

const Notification = new Schema({
    title: {},
    message: {},
    receiver: {type: Schema.Types.ObjectId, refPath: 'receiverModel', index: true, sparse: true},
    receiverModel: {
        type: String, enum: [
            APP_CONSTANTS.DATABASE.MODELS_NAME.ADMIN,
            APP_CONSTANTS.DATABASE.MODELS_NAME.USER,
            APP_CONSTANTS.DATABASE.MODELS_NAME.VENDORS]
    },

    userType: {
        type: String, enum: [
            APP_CONSTANTS.USER_TYPE.USER,
            APP_CONSTANTS.USER_TYPE.VENDOR_OWNER,
            APP_CONSTANTS.USER_TYPE.ADMIN,
            APP_CONSTANTS.USER_TYPE.VENDORS,
        ]
    },

    notificationType: {
        type: String, index: true, enum: [
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SENT_MESSAGE,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_PLACED_USER,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_PLACED_ADMIN,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_PLACED_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.USER,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.PLACED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ACCEPTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.REJECTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.DISPATCHED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.IN_TRANSIT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.DELIVERED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.CANCELLED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.PACKED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.RETURN_INITIATED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.RETURN_REQUESTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.RETURN_REJECTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.RETURN_ACCEPTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.RETURN_COMPLETED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_CANCELLED_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.PLACED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.ACCEPTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.REJECTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.DISPATCHED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.IN_TRANSIT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.DELIVERED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.CANCELLED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.PACKED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.RETURN_INITIATED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.RETURN_ACCEPTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.RETURN_REQUESTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.RETURN_REJECTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADMIN_ORDER_UPDATES.RETURN_COMPLETED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.FOLLOW_REQUEST,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.STARTED_FOLLOWING,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.LIKED_POST,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.COMMENTED_POST,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.FOLLOW_REQUEST_ACCEPTED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SHARE_POST,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SHARE_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ADDED_COLLECTION,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.LIKED_PRODUCT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.LIKED_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SHARE_PRODUCT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_REVIEW,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.PRODUCT_REVIEW,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.VENDOR_REVIEW,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.PLAN_UPDATE,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.CANCELLED_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER_CANCELLED_BY_VENDOR,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.PLAN_EXPIRY,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SUBSCRIPTION_ABOUT_TO_EXPIRE,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SUBSCRIPTION_EXPIRED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.REDIRECTION_80_PERCENT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.REDIRECTION_90_PERCENT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.REDIRECTION_CONSUMED,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SHARE_DISCOUNT,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.SHARE_GIFT,
        ]
    },
    privacyType: {
        type: String, enum: [
            APP_CONSTANTS.PRIVACY_TYPE.PUBLIC,
            APP_CONSTANTS.PRIVACY_TYPE.PRIVATE,
            APP_CONSTANTS.PRIVACY_TYPE.SELECTIVE,
        ], default: APP_CONSTANTS.PRIVACY_TYPE.PUBLIC
    },
    type: {
        type: String, index: true, enum: [
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.USER,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.ORDER,
            APP_CONSTANTS.DATABASE.NOTIFICATION_TYPE.VENDOR,
        ]
    },
    rejectReason: {type: String, default: ""},
    cancellationReason: {type: String, default: ""},
    refundRequest:{type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.REFUND_REQUEST, index: true, sparse: true},
    user: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.USER, index: true, sparse: true},
    selectedId: {type: [Schema.ObjectId], ref: APP_CONSTANTS.DATABASE.MODELS_NAME.USER},
    postId:  {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.FEEDS, index: true, sparse: true},
    product: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.PRODUCTS, index: true, sparse: true},
    vendor: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.VENDORS, index: true, sparse: true},
    feed: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.FEEDS, index: true, sparse: true},
    followId: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.FOLLOWS, index: true, sparse: true},
    order: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.ORDERS, index: true, sparse: true},
    discount: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.OFFER_PROMO, index: true, sparse: true},
    collectionId: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.CATEGORIES, index: true, sparse: true},
    orderId: {type: Schema.Types.ObjectId,  index: true, sparse: true},

    chat: {type: Schema.Types.ObjectId, ref: APP_CONSTANTS.DATABASE.MODELS_NAME.CHATS, index: true, sparse: true},

    status: {type: String, index: true, enum: statusEnum, default: APP_CONSTANTS.DATABASE.NOTIFICATION_STATUS.UNREAD},
    createdDate: {type: Number, default: +new Date(), required: true, index: true},
});

module.exports = mongoose.model(APP_CONSTANTS.DATABASE.MODELS_NAME.NOTIFICATIONS, Notification);
